apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'dr-analyst'
            keyPassword 'android'
            storeFile file('C:/Android/debug.keystore')
            storePassword 'android'
        }
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    def versionPropsFile = file('version.properties')
    def versionBuild
    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }
    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    ext.autoIncrementBuildNumber = {

        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
            versionProps['VERSION_BUILD'] = versionBuild.toString()
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }
    defaultConfig {
        applicationId "com.genedev.retinalclassifier"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 4
        versionName "2.3.17"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ext.enableCrashlytics = false
        }
    }
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
    }
}


dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    implementation 'com.wonderkiln:camerakit:0.13.1'
    implementation 'org.tensorflow:tensorflow-android:1.10.0'
}
repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}
dependencies {
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'

    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.15'
    implementation 'com.airbnb.android:lottie:2.5.1'
    implementation 'com.google.firebase:firebase-core:16.0.3'

    implementation 'com.google.firebase:firebase-auth:16.0.3'

    implementation 'com.android.support:support-v4:27.1.1'

    implementation 'com.google.firebase:firebase-database:16.0.2'

    implementation 'com.andrognito.pinlockview:pinlockview:2.1.0'

    implementation 'com.android.support:support-v4:27.1.1'

    implementation 'com.android.support:recyclerview-v7:27.1.1'

    implementation 'com.github.kittinunf.fuel:fuel-android:1.12.1'

    implementation 'com.github.bassaer:chatmessageview:1.11.2'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.itextpdf:itextg:5.5.10'

    implementation 'ai.api:sdk:2.0.7@aar'
    implementation 'ai.api:libai:1.6.12'
}
apply plugin: 'com.google.gms.google-services'